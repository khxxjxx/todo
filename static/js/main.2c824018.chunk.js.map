{"version":3,"sources":["components/Item.js","components/List.js","components/Input.js","components/NavBar.js","components/Clock.js","components/Weeks.js","img/1.jpg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Item","props","className","clicked","onClick","onDelete","id","children","List","list","map","value","Input","lists","localStorage","getItem","JSON","parse","useState","input","setInput","setList","useEffect","setItem","stringify","onSubmit","e","preventDefault","prevList","length","type","placeholder","onChange","target","window","confirm","newList","filter","findIndex","NavBar","Navbar","bg","variant","Container","Brand","Clock","Date","date","setDate","setTimeout","clearTimeout","getMonth","getDate","getHours","getMinutes","getSeconds","Weeks","today","moment","now","setNow","day","days","SetDays","newDays","unshift","pop","subtract","idx","clone","add","format","getFullYear","push","shift","App","src","Img","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2c824018.chunk.js","sourcesContent":["const Item = props => {\n  const deleteHandler = () => {\n    props.onDelete(props.id);\n  };\n\n  return (\n    <li className={`${props.clicked ? 'clicked' : ''}`} onClick={deleteHandler}>\n      {props.children}\n    </li>\n  );\n};\n\nexport default Item;\n","import React, { useState } from 'react';\nimport Item from './Item';\n\nconst List = props => {\n  return (\n    <div className=\"list\">\n      <ul>\n        {props.list.map(list => (\n          <Item\n            key={list.id}\n            id={list.id}\n            clicked={list.clicked}\n            onDelete={props.onDelete}>\n            {list.value}\n          </Item>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default List;\n","import React, { useState, useEffect } from 'react';\nimport List from './List';\n\nconst Input = props => {\n  let lists = localStorage.getItem('lists');\n  lists === null ? (lists = []) : (lists = JSON.parse(lists));\n\n  const [input, setInput] = useState('');\n  const [list, setList] = useState([...lists]);\n\n  useEffect(() => {\n    localStorage.setItem('lists', JSON.stringify(list));\n  }, [list]);\n\n  const inputValue = e => {\n    setInput(e.target.value);\n  };\n\n  const submit = e => {\n    e.preventDefault();\n    input !== '' &&\n      setList(prevList => {\n        return [...prevList, { id: list.length, value: input, clicked: false }];\n      });\n    setInput('');\n  };\n\n  const onDeleteHandler = id => {\n    if (window.confirm('리스트에서 완전히 삭제하시겠습니까?')) {\n      const newList = list.filter(list => list.id !== id);\n      setList(newList);\n    } else {\n      let newList = [...list];\n      newList[newList.findIndex(list => list.id === id)].clicked =\n        !newList[newList.findIndex(list => list.id === id)].clicked;\n      setList(newList);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"input\" onSubmit={submit}>\n        <input\n          type=\"text\"\n          value={input}\n          placeholder=\"오늘의 할일\"\n          onChange={inputValue}\n        />\n      </form>\n      <List\n        list={list}\n        id={list.id}\n        clicked={list.clicked}\n        onDelete={onDeleteHandler}\n        setList={setList}\n      />\n    </>\n  );\n};\n\nexport default Input;\n","import { Navbar, Container } from 'react-bootstrap';\n\nconst NavBar = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand>TO DO</Navbar.Brand>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import { useEffect, useState } from 'react';\n\nconst Clock = props => {\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearTimeout();\n    };\n  }, [date]);\n\n  return (\n    <div>\n      <div className=\"date\">\n        {date.getMonth() + 1}월 {date.getDate()}일\n      </div>\n      <div className=\"clock\">\n        {date.getHours()}:\n        {`${\n          date.getMinutes() < 10\n            ? `0${date.getMinutes()}`\n            : `${date.getMinutes()}`\n        }`}\n        :\n        {`${\n          date.getSeconds() < 10\n            ? `0${date.getSeconds()}`\n            : `${date.getSeconds()}`\n        }`}\n      </div>\n    </div>\n  );\n};\n\nexport default Clock;\n","import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\n\nconst Weeks = props => {\n  const today = new Date();\n  const [now, setNow] = useState(moment());\n\n  const [days, SetDays] = useState([\n    {\n      id: 0,\n      day: 'Sun',\n    },\n    {\n      id: 1,\n      day: 'Mon',\n    },\n    {\n      id: 2,\n      day: 'Tue',\n    },\n    {\n      id: 3,\n      day: 'Wed',\n    },\n    {\n      id: 4,\n      day: 'Thu',\n    },\n    {\n      id: 5,\n      day: 'Fri',\n    },\n    {\n      id: 6,\n      day: 'Sat',\n    },\n  ]);\n\n  useEffect(() => {\n    setNow(moment());\n  }, []);\n\n  const daysChangeHandlerRight = e => {\n    e.preventDefault();\n    const newDays = [...days];\n    newDays.push(newDays.shift());\n    SetDays(newDays);\n    setNow(now.add(1, 'day'));\n  };\n\n  const daysChangeHandlerLeft = e => {\n    e.preventDefault();\n    const newDays = [...days];\n    newDays.unshift(newDays.pop());\n    SetDays(newDays);\n    setNow(now.subtract(1, 'day'));\n  };\n\n  return (\n    <div className=\"week\">\n      <button onClick={daysChangeHandlerLeft}>←</button>\n      {days.map((day, idx) => (\n        <div key={day.id}>\n          <div>{day.day}</div>\n          <div\n            className={\n              now\n                .clone()\n                .subtract(3, 'day')\n                .add(idx, 'day')\n                .format('YYYY-M-D') ===\n              `${today.getFullYear()}-${\n                today.getMonth() + 1\n              }-${today.getDate()}`\n                ? 'today'\n                : ''\n            }>\n            {now\n              .clone()\n              .subtract(3, 'day')\n              .add(idx, 'day')\n              .format('DD', 'date')}\n          </div>\n        </div>\n      ))}\n      <button onClick={daysChangeHandlerRight}>→</button>\n    </div>\n  );\n};\n\nexport default Weeks;\n","export default __webpack_public_path__ + \"static/media/1.06245d5b.jpg\";","import React, { useEffect, useState } from 'react';\nimport Input from './components/Input';\nimport NavBar from './components/NavBar';\nimport Clock from './components/Clock';\nimport Weeks from './components/Weeks';\nimport Img from '././img/1.jpg';\nimport './App.css';\n\nfunction App() {\n  // const [date, setDate] = useState(moment().subtract(3, 'day'));\n  // const [dates, setDates] = useState([]);\n\n  // const date = {\n  //   year: today.getFullYear(),\n  //   month: today.getMonth() + 1,\n  //   date: today.getDate(),\n  //   day: today.getDay(),\n  // };\n\n  return (\n    <div>\n      <NavBar />\n      <img src={Img} />\n      <Weeks />\n      <Clock />\n      <Input />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}